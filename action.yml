name: Automated Version Bump
description: Automated version bump for npm packages.
runs:
  using: docker
  image: Dockerfile
branding:
  icon: chevron-up
  color: blue
inputs:
  always-pre-version:
    description: 'Always use a pre version. If it should always b a pre version, specify a preid!'
    default: 'false'
    required: false
  tag-prefix:
    description: 'Prefix that is used for the git tag'
    default: ''
    required: false
  minor-wording:
    description: 'Words list that trigger a minor version bump'
    default: 'feat,minor'
    required: false
  major-wording:
    description: 'Words list that trigger a major version bump'
    default: 'BREAKING CHANGE,major'
    required: false
  patch-wording:
    description: 'Words list that trigger a patch version bump'
    required: false
  rc-wording:
    description: 'Words list that trigger a rc version bump'
    default: 'pre-alpha,pre-beta,pre-rc'
    required: false
  skip-tag:
    description: 'Avoid to add a TAG to the version update commit'
    default: 'false'
    required: false
  skip-commit:
    description: 'Avoid to add a commit after the version is bumped'
    default: 'false'
    required: false
  skip-push:
    description: 'If true, skip pushing any commits or tags created after the version bump'
    default: false
    required: false
  PACKAGEJSON_DIR:
    description: 'Custom dir to the package'
    default: ''
    required: false
  target-branch:
    description: 'A separate branch to perform the version bump on'
    default: ''
    required: false
  default:
    description: 'Set a default version bump to use'
    default: 'patch'
    required: false
  preid:
    description: 'Set a custom preid for prerelease build'
    default: 'rc'
    required: false
  commit-message:
    description: 'Set a custom commit message for version bump commit'
    default: ''
    required: false
  bump-policy:
    description: 'Set version bump ignore policy'
    default: 'all'
    required: false
  commits-comparison:
    description: 'Optional. has three modes: "last_tags" (def) | "event" | "YOUR_TAG_NAME". Event means it will just look at the commits present in the GitHub action event. "last_tags" compares the commits between the last two tags. Any other mode will be interpreted as a specific tag name, which will be used to compare it against the latest tag.'
    default: 'last_tags'
    required: false
  push:
    description: '[DEPRECATED] Set to false to skip pushing the new tag'
    default: 'true'
    required: false
outputs:
  newTag:
    description: 'The newly created tag'
